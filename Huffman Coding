#include<iostream>
#include<queue>

using namespace std;


class Huffman
{
public:

    class node
    {
    public:
        char data;
        int frequency;
        node *left , *right;

        node(char d , int f)
        {
            data = d;
            frequency = f;
            left = NULL;
            right = NULL;
        }
    };

    class compareNode
    {
    public:
        bool operator() ( node *x , node *y)
        {
            if(x->frequency > y->frequency)
                return true;
            return false;
        }
    };

    priority_queue<node , vector<node*> , compareNode> pq;
    int N;

    void printArr(vector<int> arr , int top)
    {
        for(int i=0 ; i< top ; i++)
            cout<<arr[i];
        cout<<endl;
    }

    bool isLeaf( node *root)
    {
        return !root->left && !root->right;
    }

    void printCodes(node *root , vector<int> arr , int top )
    {
        if(root->left)
        {
          arr[top] = 0;
          printCodes(root->left , arr , top+1);
        }

        if(root->right)
        {
          arr[top] = 1;
          printCodes(root->right , arr , top+1);
        }

        if(isLeaf(root))
        {
            cout<<root->data<<":";
            printArr(arr , top);
        }
    }

    void BuildHuffmanTree()
    {
        while(pq.size() > 1)
        {
            node *temp1 = pq.top();
            pq.pop();
            node *temp2 = pq.top();
            pq.pop();
            node *temp3 = new node('$' , temp1->frequency + temp2->frequency);
            temp3->left = temp1;
            temp3->right = temp2;

            pq.push(temp3);
        }
        vector<int> arr;
        arr.resize(N);
        printCodes( pq.top() , arr , 0);
    }

    void buildMinHeap( vector<node*> a )
    {
        for(int i=0 ; i< a.size() ; i++)
            pq.push(a[i]);

        BuildHuffmanTree();
    }


    void createNode( char d[] , int f[] , int n)
    {
        vector<node*> a;
        a.resize(n);
        N = n;

        for(int i=0 ; i<n ; i++)
        {
            a[i] = new node(d[i] , f[i]);
        }

        buildMinHeap(a);
    }



};

int main()
{
    Huffman h;

    char d[] = {'a' , 'b' , 'c' ,'d' , 'e' , 'f'};
    int f[] =  { 5 , 9 , 12 ,13 , 16 , 45};

    h.createNode(d , f , 6);

    return 0;
}
