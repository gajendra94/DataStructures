#include <iostream>
#include <queue>
using namespace std;

class HUffman
{
public:
    class node
    {
    public:
        char data;
        int frequency;
        node *left;
        node *right;

        node(char data , int frequency)
        {
            this->data = data;
            this->frequency = frequency;
            left = NULL;
            right = NULL;
        }
    };

    queue<node*> first;
    queue<node*> second;
    int N;

    void createNode(char d[] , int f[] , int n)
    {
        N = n;

        for(int i=0 ; i<n ; i++)
        {
            first.push(new node(d[i] , f[i]));
        }
        BuildHuffmanTree();
    }

    node* findMin()
    {
        node *temp;
        if(first.empty())
        {
            temp = second.front();
            second.pop();

            return temp;
        }

        if(second.empty())
        {
            temp = first.front();
            first.pop();
            return temp;
        }

        if(first.front()->frequency < second.front()->frequency)
        {
            temp = first.front();
            first.pop();
            return temp;
        }

        temp = second.front();
        second.pop();
        return temp;
    }

    void printArr(int arr[] , int n)
    {
        for(int i=0 ; i<n ; i++)
        {
            cout<<arr[i];
        }
        cout<<endl;
    }

    bool isLeaf( node *root)
    {
        return!root->right && !root->left;
    }

    void printCodes( node *root , int arr[] , int top)
    {
        if(root->left)
        {
            arr[top] = 0;
            printCodes(root->left , arr , top+1);
        }

        if(root->right)
        {
            arr[top] = 1;
            printCodes(root->right , arr , top+1);
        }

        if(isLeaf(root))
        {
            cout<<root->data<<" : ";
            printArr(arr , top);
        }
    }
    void BuildHuffmanTree()
    {

        while(!(first.empty() && second.size() == 1))
        {
            node *left , *right;

            left  = findMin();
            right = findMin();

            node *top = new node('$' , left->frequency + right->frequency);
            top->left = left;
            top->right = right;
            second.push(top);
        }

        int arr[N] , top =0;

        printCodes(second.front() , arr , top);
    }

};

int main()
{
    char d[] = {'a' , 'b' , 'c' , 'd' , 'e' , 'f'};
    int  f[] = {5 , 9 , 12 , 13 , 16 , 45};

    HUffman h;
    h.createNode(d , f  , 6);
    return 0;
}
