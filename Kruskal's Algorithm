#include <iostream>
#include<vector>
#include<utility>
#include<algorithm>

using namespace std;

class Graph
{
public:
    int v;
    int e;
    vector< pair<int , pair<int ,int> > > edge;
    vector< pair<int , int> > subset;

    Graph(int vertices , int edges)
    {
        v = vertices;
        e = edges;
        edge.resize(edges+1);
        subset.resize(vertices+1);

        for(int i=1 ; i<=vertices ; i++)
        {
            subset[i].first = i;
            subset[i].second = 0;
        }
    }

    void addEdge(int x , int i , int j , int w)
    {
        edge[x].first = w;
        edge[x].second.first = i;
        edge[x].second.second = j;
    }

    int Find(int i )
    {
        if(subset[i].first != i)
            subset[i].first=Find(subset[i].first);
        return subset[i].first;
    }

    void Union(int x , int y)
    {
        int xroot = Find(x);
        int yroot = Find(y);

        if(subset[xroot].second < subset[yroot].second)
            subset[xroot].first = yroot;
        else
            if(subset[xroot].second > subset[yroot].second)
                subset[yroot].first = xroot;
        else
        {
            subset[xroot].first = yroot;
            subset[yroot].second++;
        }
    }

    void kruskalMST()
    {
        sort(edge.begin() , edge.end());

        int i=1 , j=1;

        vector< pair< int , pair< int , int > > > result;

        result.resize(v);

        while(i <= v-1)
        {
            int x = Find(edge[j].second.first);
            int y = Find(edge[j].second.second);
            if(x!=y)
            {
                result[i] = edge[j];
                i++;

                Union(x , y);
            }
            j++;
        }
        cout<<"following edges are included in the MST"<<endl;
        for(int i=1 ; i<=v-1 ; i++)
        {
            cout<<result[i].second.first<<" -- "<<result[i].second.second<<" == "<<result[i].first<<endl;

        }
    }

};


int main()
{
    Graph G(4 , 5);
    G.addEdge(1, 1, 2 , 10);
    G.addEdge(2, 1, 3 , 6);
    G.addEdge(3, 1, 4 , 5);
    G.addEdge(4, 2, 4 , 15);
    G.addEdge(5, 3, 4 , 4);

    G.kruskalMST();

    return 0;
}
